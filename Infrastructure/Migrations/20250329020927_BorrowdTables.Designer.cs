// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250329020927_BorrowdTables")]
    partial class BorrowdTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BorrowedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Domain.Entities.BorrowedBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowedRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BorrowedRequestId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BorrowedRequestId")
                        .IsUnique();

                    b.HasIndex("BorrowedRequestId1")
                        .IsUnique()
                        .HasFilter("[BorrowedRequestId1] IS NOT NULL");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("Domain.Entities.BorrowedRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowedRequests");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bc3f80c-68bd-4fc8-aa7c-f741c6febc49"),
                            Email = "admin@example.com",
                            IsActived = true,
                            Name = "Admin",
                            Password = "AQAAAAIAAYagAAAAEJU5Cd3lJck1GLM4aK7UFPUNRO/Wj6ADACSCMaf0fMRr8VBaEmvSIyyzdXrrssaVGw==",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7ab70683-3264-46d0-aec9-3b728d523ba7"),
                            Email = "officer@example.com",
                            IsActived = true,
                            Name = "Officer",
                            Password = "AQAAAAIAAYagAAAAEBwOyDMN3EiIar6qdfWKO0Q9nW0mB32q6XWpdwyxSoIUnxh1M19Dy0N5eQijHt4XLg==",
                            Role = "Officer"
                        },
                        new
                        {
                            Id = new Guid("049b7d0a-c69a-4be1-a0e3-c2654625ae26"),
                            Email = "user@example.com",
                            IsActived = true,
                            Name = "User",
                            Password = "AQAAAAIAAYagAAAAEL5F6aiqmP5seH5L4ty9Vbr6iKJReIG6M+N5egkxvVUMmbUht1Ux22xm+LPOWZd2ZA==",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BorrowedBook", b =>
                {
                    b.HasOne("Domain.Entities.BorrowedRequest", "BorrowedRequest")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.BorrowedBook", "BorrowedRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BorrowedRequest", null)
                        .WithOne("BorrowedBook")
                        .HasForeignKey("Domain.Entities.BorrowedBook", "BorrowedRequestId1");

                    b.Navigation("BorrowedRequest");
                });

            modelBuilder.Entity("Domain.Entities.BorrowedRequest", b =>
                {
                    b.HasOne("Domain.Entities.Book", "Book")
                        .WithMany("BorrowedRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("BorrowedRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.Navigation("BorrowedRequests");
                });

            modelBuilder.Entity("Domain.Entities.BorrowedRequest", b =>
                {
                    b.Navigation("BorrowedBook");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("BorrowedRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
